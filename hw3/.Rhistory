binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun=dpois,
#geom = "density",
#n = 77,
args = list(lambda)) +
theme_minimal()
plot(
density(
dpois( x = 0:(14), lambda)
)
)
dpois( x = 0:(14), lambda)
plot(
density(
dpois( x = 0:(14), lambda) * n_int
)
)
ggplot(counts_df_2, aes (x = counts_2)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun=dpois,
geom = "density",
n = 14,
args = list(lambda)) +
theme_minimal()
ggplot(counts_df_2, aes (x = counts_2)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun=dpois,
args = list(lambda)) +
theme_minimal()
ggplot(counts_df_2, aes (x = counts_2)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun=dpois,
args = list(x = 0:(14), lambda)) +
theme_minimal()
ggplot(counts_df_2, aes (x = counts_2)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun=dpois,
args = list(x = 0:(14), lambda)) +
theme_minimal()
ggplot(to_plot, aes(x= value)) +
geom_histogram(aes(fill = key), alpha = 0.5, position = "identity",
binwidth = 1, col = "white") +
geom_density(aes( y = ..count.., col = key)) +
theme_minimal() +
xlab("Number of Palindromes") +
ylab("Number of Intervals") +
scale_fill_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson")) +
scale_color_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson"))
ggplot(counts_df_2, aes (x = counts_2)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
theme_minimal()
counts_2
counts_2 <- hist(counts_df$counts, breaks = seq(0, 14, 2), plot = F)$counts
counts_df_2 <- data.frame(counts_2)
ggplot(counts_df_2, aes (x = counts_2)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
theme_minimal()
counts_2 <- hist(counts_df$counts, breaks = seq(0, 14, 1), plot = F)$counts
counts_df_2 <- data.frame(counts_2)
ggplot(counts_df_2, aes (x = counts_2)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
theme_minimal()
table(counts_df$counts)
counts_2 <- table(counts_df$counts)
counts_df_2 <- data.frame(counts_2)
View(counts_df_2)
ggplot(counts_df_2, aes (x = frew)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
theme_minimal()
ggplot(counts_df_2, aes (x = freq)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
theme_minimal()
ggplot(counts_df_2, aes (x = counts_df$counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
theme_minimal()
ggplot(counts_df, aes (x = counts_df$counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
theme_minimal()
plot(
density(
dpois( x = 0:(14), lambda) * n_int
)
)
ggplot(counts_df, aes (x = counts_df$counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
theme_minimal()
0:(14)
plot(
density(
dpois( x = 0:14, lambda) * n_int
)
)
plot(
dpois( x = 0:14, lambda) * n_int
)
plot(
dpois( x = 0:14, lambda)
)
plot(aes(x = 0:14)
dpois( x = 0:14, lambda)
ggplot(counts_df, aes (x = counts_df$counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_func(fun = dpois)
ggplot(counts_df, aes (x = counts_df$counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois)
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois)
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois) +
theme_minimal()
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
args(lambda)) +
theme_minimal()
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
args(x = 0:14, lambda)) +
theme_minimal()
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
args = list (x = 0:14, lambda)) +
theme_minimal()
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
geom = "density"
args = list (x = 0:14, lambda)) +
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
geom = "density",
args = list (x = 0:14, lambda)) +
theme_minimal()
plot(
dpois( x = 0:14, lambda)
)
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
geom = "density",
args = list (x = 0:14, lambda)) +
theme_minimal()
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
geom = "point",
args = list (x = 0:14, lambda)) +
theme_minimal()
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
geom = "point",
args = list (x = 0:1, lambda)) +
theme_minimal()
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
geom = "point",
args = list (x = 0:10, lambda)) +
theme_minimal()
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
geom = "point",
args = list ( lambda)) +
theme_minimal()
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
args = list ( lambda)) +
theme_minimal()
plot(
dpois( x = 0:14, lambda)
)
plot(
dpois( x = 0:14, lambda), kind = "density"
)
?plot
density(
dpois( x = 0:14, lambda), kind = "density"
)
densityplot(
dpois( x = 0:14, lambda), kind = "density"
)
densityplot(
dpois( x = 0:14, lambda)
)
plot(
dpois( x = 0:14, lambda)
)
?plot
ggplot(counts_df, aes (x = counts)) +
geom_histogram(alpha = 1, fill = "steelblue", position = "identity",
binwidth = 1, col = "white", aes(y = ..density..)) +
stat_function(fun = dpois,
args = list ( lambda)) +
geom_line(aes(x = 1:14, y = dpois( x = 0:14, lambda))) +
theme_minimal()
ggplot(to_plot, aes(x= value)) +
geom_histogram(aes(fill = key), alpha = 0.5, position = "identity",
binwidth = 1, col = "white") +
geom_density(aes( y = ..count.., col = key)) +
theme_minimal() +
xlab("Number of Palindromes") +
ylab("Number of Intervals") +
scale_fill_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson")) +
scale_color_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson"))
plot(
dpois( x = 0:14, lambda)
)
plot(
dpois( x = 0:14, lambda),
type = "line"
)
plot(
dpois( x = 0:14, lambda),
type = "density"
)
plot(
dpois( x = 0:14, lambda),
type = "line"
)
plot(
dpois( x = 0:14, lambda),
type = "kde"
)
plot(
dpois( x = 0:14, lambda),
type = "line"
)
plot(density(
counts_df$counts
))
plot(
dpois( x = 0:14, lambda),
type = "line"
)
plot(density(
counts_df$counts,
add = T
))
plot(
dpois( x = 0:14, lambda),
type = "line"
)
plot(density(
counts_df$counts,
add = TRUE
))
lines(density(
counts_df$counts,
add = TRUE
))
lines(plot(density(
counts_df$counts,
add = TRUE
)))
plot(
dpois( x = 0:14, lambda),
type = "line"
)
lines(plot(density(
counts_df$counts,
add = TRUE
)))
curve(plot(density(
counts_df$counts,
)), add = TRUE)
curve(
dpois( x = 0:14, lambda),
type = "line"
)
curve(
x = dpois( x = 0:14, lambda),
type = "line"
)
curve(
x = dpois( x = 0:14, lambda)
#type = "line"
)
?curve
plot(
x = dpois( x = 0:14, lambda),
type = "line"
)
plot(density(
counts_df$counts,
), add = TRUE)
plot(
x = dpois( x = 0:14, lambda),
type = "line"
)
plot(density(
counts_df$counts,
), add = TRUE)
lines(density(
counts_df$counts,
), add = TRUE)
plot(
x = dpois( x = 0:14, lambda),
type = "line"
)
lines(density(
counts_df$counts,
), add = TRUE)
lines(density(
counts_df$counts,
), col = "blue", add = TRUE)
plot(
x = dpois( x = 0:14, lambda),
type = "line"
)
lines(density(
counts_df$counts,
), col = "blue", add = TRUE)
# 3) Number of Palindromes vs Number of Intervals
pois_random <- rpois(n_int, lambda = mean(counts))
counts_df <- data.frame(counts, pois_random)
# 2) Plot Residuals
breaks <- seq(0, xlim, by = binwidth)
counts <- hist(data$location, breaks, plot = F)$counts
residuals <- (counts - expected) / sqrt(expected)
# GRAPHICAL METHODS
set.seed(2000)
binwidth = 3000
n = 296 # sample size
L = 229345 # total size
M = binwidth # interval length
xlim = (as.integer(L/M) + 1) * M # xlim for hist
n_int = x_lim/M
# 1) Histogram of Counts vs Expected Uniform Distribution
expected = n/n_int
se = sqrt(expected / n)
ggplot(data = random_scatters, aes(x = real)) +
geom_histogram(binwidth = binwidth, fill = "darkgoldenrod3", color = "white") +
ylab("Frequency") +
xlab("Palindrome")+
ylim (c(0, 20) )+
theme_minimal() +
geom_hline(yintercept = expected, color = "black") +
geom_hline(yintercept = expected + (3 * se), color = "darkgray", lty = "dashed") +
geom_hline(yintercept = expected - (3 * se), color = "darkgray", lty = "dashed")
# 2) Plot Residuals
breaks <- seq(0, xlim, by = binwidth)
counts <- hist(data$location, breaks, plot = F)$counts
residuals <- (counts - expected) / sqrt(expected)
to_plot <- data.frame(residuals)
ggplot(to_plot, aes(x = 1:n_int, y = residuals)) +
geom_point( col = "steelblue") +
geom_abline(slope = 0, intercept = 0, color = "black") +
geom_abline(slope = 0, intercept = 3, color = "darkred", lty = "dashed") +
xlab("interval position") +
ggtitle("Residual Plot") +
theme_minimal()
rm(residuals)
# 3) Number of Palindromes vs Number of Intervals
pois_random <- rpois(n_int, lambda = mean(counts))
counts_df <- data.frame(counts, pois_random)
to_plot <- gather(counts_df)
ggplot(to_plot, aes(x= value)) +
geom_histogram(aes(fill = key), alpha = 0.5, position = "identity",
binwidth = 1, col = "white") +
geom_density(aes( y = ..count.., col = key)) +
theme_minimal() +
xlab("Number of Palindromes") +
ylab("Number of Intervals") +
scale_fill_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson")) +
scale_color_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson"))
plot(
x = dpois( x = 0:14, lambda),
type = "line"
)
lines(density(
counts_df$counts,
), col = "blue", add = TRUE)
# CHI-SQ TEST: test multiple interval lengths and see if chi-square analysis is consistent with each other
# ---------------
# binwidth = 4000
xlim <- (as.integer(L/4000) + 1) * 4000
n_int = xlim/4000
expected = n/n_int
breaks <- seq(0, xlim, by = 4000)
counts4000 <- hist(data$location, breaks, plot = F)$counts
chisq.stat <- sum((counts - expected) ^ 2 / expected)
d.f = n_int - 1 # uniform distribution so no additional parameters
pval = 1 - pchisq(chisq.stat, df = d.f)
rm(xlim, n_int, expected, breaks, counts4000, d.f)
# ----------------
# binwidth = 3000
xlim <- (as.integer(L/3000) + 1) * 3000
n_int = xlim/3000
expected = n/n_int
breaks <- seq(0, xlim, by = 3000)
counts3000 <- hist(data$location, breaks, plot = F)$counts
chisq.stat <- sum((counts - expected) ^ 2 / expected)
d.f = n_int - 1 # uniform distribution so no additional parameters
pval = 1 - pchisq(chisq.stat, df = d.f)
rm(xlim, n_int, expected, breaks, counts3000, d.f)
# ------------------
# binwidth = 5000
xlim <- (as.integer(L/5000) + 1) * 5000
n_int = xlim/5000
expected = n/n_int
breaks <- seq(0, xlim, by = 5000)
counts5000 <- hist(data$location, breaks, plot = F)$counts
chisq.stat <- sum((counts - expected) ^ 2 / expected)
d.f = n_int - 1 # uniform distribution so no additional parameters
pval = 1 - pchisq(chisq.stat, df = d.f)
rm(xlim, n_int, expected, breaks, counts5000, d.f)
# divide counts into 0, 1, 2, 3, 4, 5, 6, 7, ,8, >=9
counts_df$truncated <- counts_df$counts
counts_df$truncated[counts_df$counts >= 9] <- ">=9"
counts_df$truncated <- as.character(counts_df$truncated)
lvls = c("0", "1", "2", "3", "4", "5", "6", "7", "8", ">=9")
counts_df$truncated <- ordered(counts_df$truncated, levels = lvls)
# get counts of counts
counts <- as.vector(table(counts_df$truncated))
# get expected poisson distribution
xlim <- (as.integer(L/3000) + 1) * 3000
n_int = xlim/3000
lambda = n/n_int
exp_pois <- c(dpois(0:(8), lambda), 1-sum(dpois(0:(8),lambda)))
exp_counts <- exp_pois*n_int
# chi-sq test
stat = sum((counts - exp_counts)^2/exp_counts)
d.f = 9 - 1 - 1
pchisq(stat, d.f, lower.tail = F)
chisq.test(counts, exp_counts, simulate.p.value = T)
?chisq.test
(counts - exp_counts)^2/exp_counts
counts
exp_counts
chisq.test(counts, exp_counts, simulate.p.value = T)
chisq.test(counts, exp_counts, simulate.p.value = F)
chisq.test(counts, = = exp_counts, simulate.p.value = F)
chisq.test(counts, [] = exp_counts, simulate.p.value = F)
chisq.test(counts, p = exp_counts, simulate.p.value = F)
chisq.test(x = counts, y = exp_counts, simulate.p.value = F)
counts_norm = counts / sum(counts)
chisq.test(x = counts_norm, p = exp_pois, simulate.p.value = F)
# chi-sq test
stat = sum((counts - exp_counts)^2/exp_counts)
d.f = 10 - 1 - 1
pchisq(stat, d.f, lower.tail = F)
chisq.test(x = counts_norm, p = exp_pois, simulate.p.value = F)
counts_norm = counts / sum(counts)
chisq.test(x = counts_norm, p = exp_pois, simulate.p.value = F)
pchisq(stat, d.f, lower.tail = F)
stat
# chi-sq test
stat = sum((counts_norm - exp_pois)^2/exp_pois)
d.f = 10 - 1 - 1
pchisq(stat, d.f, lower.tail = F)
pchisq(stat, 9, lower.tail = F)
chisq.test(x = counts, p = exp_pois, simulate.p.value = F)
# chi-sq test
stat = sum((counts - exp_pois)^2/exp_pois)
pchisq(stat, 9, lower.tail = F)
# chi-sq test
stat = sum((counts - expected)^2/expected)
pchisq(stat, 9, lower.tail = F)
# chi-sq test
stat = sum((counts - exp_count)^2/exp_count)
# chi-sq test
stat = sum((counts - exp_counts)^2/exp_counts)
pchisq(stat, 9, lower.tail = F)
chisq.test(x = counts, p = exp_pois, simulate.p.value = F)
pchisq(stat, 9, lower.tail = F)
pchisq(stat, 8, lower.tail = F)
chisq.test(x = counts, p = exp_pois, simulate.p.value = F)
pchisq(stat, 8, lower.tail = F)
chisq.test(x = counts, p = exp_pois, simulate.p.value = T)
pchisq(stat, 8, lower.tail = F)
pchisq(stat, 9, lower.tail = F)
chisq.test(x = counts, p = exp_pois, simulate.p.value = T)
# chi-sq test
chisq.test(x = counts, p = exp_pois, simulate.p.value = T)
# chi-sq test
chisq.test(x = counts, p = exp_pois, simulate.p.value = T, B = 10000)
