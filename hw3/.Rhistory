# spaces between consecutive hits
sorted_random <- sort(sample, decreasing = FALSE)
spaces_random <- diff(sorted_random)
sorted_data <- sort(data$location, decreasing = FALSE)
spaces_loc <- diff(sorted_data)
spaces <- data.frame("random_hits" = spaces_random,
"palindrome_location" = spaces_loc,
"index" = c(1:295))
spaces <- gather(spaces, key = "distribution", value = "spaces", -index)
ggplot(data = spaces, aes(x = index, y = spaces, col = distribution)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
geom_smooth(se = F, lwd = 0.5) +
theme_minimal()
# ECDF
# ecdf
plot(ecdf(sample), verticals = TRUE, col = 'blue', do.points = FALSE,
main = "ECDF of Random Hits and Palindrome Locations")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
# COMPARING LOCATIONS - HISTOGRAM OF TWO DISTRIBUTIONS
# plot both samples
random = ggplot(data = random_df, aes(x = sample)) +
geom_histogram(binwidth = binwidth, fill = "steelblue", color = "white") +
ylim(c(0, 20)) +
ggtitle("Distribution of Random Hits") +
theme_minimal()
location = ggplot(data = data, aes(x = location)) +
geom_histogram(binwidth = binwidth, fill = "steelblue", color = "white") +
ylim(c(0, 20)) +
ggtitle("Distribution of Palindrome Locations") +
theme_minimal()
random + location
random + location
# /////////////////////////////
# VISUALIZE RANDOM SCATTERS
# ////////////////////////////
binwidth = 4000
# COMPARING LOCATIONS - HISTOGRAM OF TWO DISTRIBUTIONS
# plot both samples
random = ggplot(data = random_df, aes(x = sample)) +
geom_histogram(binwidth = binwidth, fill = "steelblue", color = "white") +
ylim(c(0, 20)) +
ggtitle("Distribution of Random Hits") +
theme_minimal()
location = ggplot(data = data, aes(x = location)) +
geom_histogram(binwidth = binwidth, fill = "steelblue", color = "white") +
ylim(c(0, 20)) +
ggtitle("Distribution of Palindrome Locations") +
theme_minimal()
random + location
# /////////////////////////////
# VISUALIZE RANDOM SCATTERS
# ////////////////////////////
binwidth = 3000
spaces <- data.frame("random_hits" = spaces_random,
"palindrome_location" = spaces_loc,
"index" = c(1:295))
M = 3000 # interval length
# COMPARING LOCATIONS - HISTOGRAM OF TWO DISTRIBUTIONS
# plot both samples
random = ggplot(data = random_df, aes(x = sample)) +
geom_histogram(binwidth = binwidth, fill = "steelblue", color = "white") +
ylim(c(0, 20)) +
ggtitle("Distribution of Random Hits") +
theme_minimal()
location = ggplot(data = data, aes(x = location)) +
geom_histogram(binwidth = binwidth, fill = "steelblue", color = "white") +
ylim(c(0, 20)) +
ggtitle("Distribution of Palindrome Locations") +
theme_minimal()
random + location
ggplot(data = spaces, aes(x = index, y = spaces, col = distribution)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
geom_smooth(se = F, method = "lm", lwd = 0.5) +
theme_minimal()
# COMPARING SPACES BETWEEN HITS
# spaces between consecutive hits
sorted_random <- sort(sample, decreasing = FALSE)
spaces_random <- diff(sorted_random)
sorted_data <- sort(data$location, decreasing = FALSE)
spaces_loc <- diff(sorted_data)
spaces <- data.frame("random_hits" = spaces_random,
"palindrome_location" = spaces_loc,
"index" = c(1:295))
spaces <- gather(spaces, key = "distribution", value = "spaces", -index)
ggplot(data = spaces, aes(x = index, y = spaces, col = distribution)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
geom_smooth(se = F, method = "lm", lwd = 0.5) +
theme_minimal()
ggplot(data = spaces, aes(x = index, y = spaces, col = distribution)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
theme_minimal()
ggplot(data = spaces, aes(x = index, y = spaces, col = distribution)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
theme_minimal()
spaces <- data.frame("random_hits" = spaces_random,
"palindrome_location" = spaces_loc,
"index" = c(1:295))
View(spaces)
ggplot(data= spaces, aes( x = index, y = random_hits)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
theme_minimal()
ggplot(data= spaces, aes( x = index, y = palindrome_location)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
theme_minimal()
random = ggplot(data= spaces, aes( x = index, y = random_hits)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
theme_minimal()
palindrome = ggplot(data= spaces, aes( x = index, y = palindrome_location)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
theme_minimal()
random+palindrome
random = ggplot(data= spaces, aes( x = index, y = random_hits)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Random Hits") +
ggtitle("Spaces Between Consecutive Random Hits") +
theme_minimal()
palindrome = ggplot(data= spaces, aes( x = index, y = palindrome_location)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
theme_minimal()
random+palindrome
random = ggplot(data= spaces, aes( x = index, y = random_hits)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Random Hits") +
ggtitle("Spaces Between Consecutive Random Hits") +
ylim(c(0,6000)) +
theme_minimal()
palindrome = ggplot(data= spaces, aes( x = index, y = palindrome_location)) +
geom_point(alpha = 0.75) +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
ylim(c(0,6000)) +
theme_minimal()
random+palindrome
random+palindrome
random = ggplot(data= spaces, aes( x = index, y = random_hits)) +
geom_point(alpha = 0.75, col = "steelblue") +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Random Hits") +
ggtitle("Spaces Between Consecutive Random Hits") +
ylim(c(0,6000)) +
theme_minimal()
random + palindrome
random+palindrome
random + palindrome
palindrome = ggplot(data= spaces, aes( x = index, y = palindrome_location)) +
geom_point(alpha = 0.75, col = "darkgoldenrod4") +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
ylim(c(0,6000)) +
theme_minimal()
random + palindrome
palindrome = ggplot(data= spaces, aes( x = index, y = palindrome_location)) +
geom_point(alpha = 0.75, col = "darkgoldenrod3") +
xlab("Palindrome Number (Sorted)") +
ylab("Spaces Between Consecutive Palindromes") +
ggtitle("Spaces Between Consecutive Palindromes") +
ylim(c(0,6000)) +
theme_minimal()
random + palindrome
random + palindrome
random = ggplot(data= spaces, aes( x = index, y = random_hits)) +
geom_point(alpha = 0.75, col = "steelblue") +
xlab("Random Hit Number (Sorted)") +
ylab("Number of Spaces") +
ggtitle("Spaces Between Consecutive Random Hits") +
ylim(c(0,6000)) +
theme_minimal()
palindrome = ggplot(data= spaces, aes( x = index, y = palindrome_location)) +
geom_point(alpha = 0.75, col = "darkgoldenrod3") +
xlab("Palindrome Number (Sorted)") +
ylab("Number of Spaces") +
ggtitle("Spaces Between Consecutive Palindromes") +
ylim(c(0,6000)) +
theme_minimal()
random + palindrome
random + palindrome
# ECDF
# ecdf
plot(ecdf(sample), verticals = TRUE, col = 'blue', do.points = FALSE,
main = "ECDF of Random Hits and Palindrome Locations",
xlab = "Location",
ylab = "Cumulative Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
# ECDF
# ecdf
plot(ecdf(sample), verticals = TRUE, col = 'blue', do.points = FALSE,
main = "ECDF of Random Hits and Palindrome Locations",
xlab = "Location",
ylab = "Cumulative Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
plot(ecdf(sample), verticals = TRUE, col = 'blue', do.points = FALSE,
main = "ECDF of Random Hits and Palindrome Locations",
xlab = "Location",
ylab = "Cumulative Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
plot(ecdf(sample), verticals = TRUE, col = 'blue', do.points = FALSE,
main = "ECDF of Random Hits and Palindrome Locations",
xlab = "Location",
ylab = "Cumulative Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
# GRAPHICAL METHODS
set.seed(0630)
# Histogram of Counts vs Expected Uniform Distribution
n_int = L/M
expected = n/n_int
location + geom_abline(slope = 0, intercept = expected, color = "black")
# Number of Palindromes vs Number of Intervals
breaks = seq(0, L, by = 4000)
data$bin <- cut(data$location, breaks)
intv = data %>%
group_by(bin, .drop = FALSE) %>%
summarise(n_palindrome = n())
# Expected Poisson Distribution
pois_random <- rpois(58, lambda = mean(intv$n_palindrome))
intv$pois <- pois_random
to_plot = gather(intv[2:3], key = "distr", value = "location")
ggplot(to_plot, aes(x= location)) +
geom_histogram(aes(fill = distr), alpha = 0.5, position = "identity") +
#geom_histogram(aes(x = pois_random), fill = "gray27", alpha = 0.7) +
#geom_density(aes(x = pois_random, y = ..count..), col = "gray27") +
geom_density(aes( y = ..count.., col =distr)) +
theme_minimal() +
xlab("Number of Palindromes") +
ylab("Number of Intervals") +
scale_fill_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson")) +
scale_color_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson"))
# FORMAL STATISTICAL METHODS
# chi-sq test
counts = as.vector(table(data$bin))
chisq.stat <- sum((counts - expected) ^ 2 / expected)
d.f = n_int - 1 # uniform distribution so no additional parameters
pval = 1 - pchisq(chisq.stat, df = d.f)
# ks-test
ks.test(data$location, punif)
ks.test(intv$n_palindrome, ppois, lambda = mean(intv$n_palindrome))
# GRAPHICAL METHODS
set.seed(0630)
# Histogram of Counts vs Expected Uniform Distribution
n_int = L/M
expected = n/n_int
location + geom_abline(slope = 0, intercept = expected, color = "black")
# Number of Palindromes vs Number of Intervals
breaks = seq(0, L, by = 4000)
data$bin <- cut(data$location, breaks)
intv = data %>%
group_by(bin, .drop = FALSE) %>%
summarise(n_palindrome = n())
# Expected Poisson Distribution
pois_random <- rpois(58, lambda = mean(intv$n_palindrome))
intv$pois <- pois_random
to_plot = gather(intv[2:3], key = "distr", value = "location")
ggplot(to_plot, aes(x= location)) +
geom_histogram(aes(fill = distr), alpha = 0.5, position = "identity") +
#geom_histogram(aes(x = pois_random), fill = "gray27", alpha = 0.7) +
#geom_density(aes(x = pois_random, y = ..count..), col = "gray27") +
geom_density(aes( y = ..count.., col =distr)) +
theme_minimal() +
xlab("Number of Palindromes") +
ylab("Number of Intervals") +
scale_fill_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson")) +
scale_color_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson"))
# FORMAL STATISTICAL METHODS
# chi-sq test
counts = as.vector(table(data$bin))
chisq.stat <- sum((counts - expected) ^ 2 / expected)
d.f = n_int - 1 # uniform distribution so no additional parameters
pval = 1 - pchisq(chisq.stat, df = d.f)
# ks-test
ks.test(data$location, punif)
ks.test(intv$n_palindrome, ppois, lambda = mean(intv$n_palindrome))
# COMPARING LOCATIONS - HISTOGRAM OF TWO DISTRIBUTIONS
# plot both samples
random = ggplot(data = random_df, aes(x = sample)) +
geom_histogram(binwidth = binwidth, fill = "steelblue", color = "white") +
ylim(c(0, 17)) +
ggtitle("Distribution of Random Hits") +
theme_minimal()
location = ggplot(data = data, aes(x = location)) +
geom_histogram(binwidth = binwidth, fill = "steelblue", color = "white") +
ylim(c(0, 17)) +
ggtitle("Distribution of Palindrome Locations") +
theme_minimal()
random + location
location + geom_abline(slope = 0, intercept = expected, color = "black")
location + geom_abline(slope = 0, intercept = expected, color = "black")
ggplot(to_plot, aes(x= location)) +
geom_histogram(aes(fill = distr), alpha = 0.5, position = "identity") +
#geom_histogram(aes(x = pois_random), fill = "gray27", alpha = 0.7) +
#geom_density(aes(x = pois_random, y = ..count..), col = "gray27") +
geom_density(aes( y = ..count.., col =distr)) +
theme_minimal() +
xlab("Number of Palindromes") +
ylab("Number of Intervals") +
scale_fill_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson")) +
scale_color_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson"))
ggplot(to_plot, aes(x= location)) +
geom_histogram(aes(fill = distr), alpha = 0.5, position = "identity") +
#geom_histogram(aes(x = pois_random), fill = "gray27", alpha = 0.7) +
#geom_density(aes(x = pois_random, y = ..count..), col = "gray27") +
geom_density(aes( y = ..count.., col =distr)) +
theme_minimal() +
xlab("Number of Palindromes") +
ylab("Number of Intervals") +
scale_fill_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson")) +
scale_color_discrete(name = "Distribution", labels = c("Observed Palindrome Locations", "Poisson"))
# chi-sq test
counts = as.vector(table(data$bin))
chisq.stat <- sum((counts - expected) ^ 2 / expected)
d.f = n_int - 1 # uniform distribution so no additional parameters
pval = 1 - pchisq(chisq.stat, df = d.f)
# ks-test
ks.test(data$location, punif)
ks.test(intv$n_palindrome, ppois, lambda = mean(intv$n_palindrome))
# ks-test
ks.test(data$location, punif)
ks.test(intv$n_palindrome, ppois, lambda = mean(intv$n_palindrome))
# ks-test
ks.test(sample, punif)
# ks-test
ks.test(intv$n_palindrome, punif)
# ks-test
ks.test(intv$n_palindrome, punif)
rnorm(100)
# ks-test
ks.test(rnorm(100), punif)
# ks-test
ks.test(rpois(100), punif)
# ks-test
ks.test(rpois(100, lambda = 1), punif)
?ks.test
# ks-test
ks.test(runif(100), punif)
# ks-test
ks.test(runif(1000), punif)
# ks-test
ks.test(data$location, punif)
# ks-test
plot(ecdf(data$location, punif))
# ks-test
plot(ecdf(data$location, unif))
# ks-test
plot(ecdf(data$location, runif))
# ks-test
plot(ecdf(punif))
?ecdf()
ecdf(runif(1000))
# ks-test
plot(ecdf(runif(10000)))
# ks-test
plot(ecdf(runif(100000)))
# ks-test
plot(ecdf(runif(100000, 0, L)))
plot(ecdf(data$location, add = T, color = "red"))
plot(ecdf(data$location), add = T, color = "red"))
plot(ecdf(data$location), add = T, color = "red")
plot(ecdf(runif(100000, 0, L)))
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
# ks-test
plot(ecdf(runif(100000, 0, L)), title = "ECDF of Palindromes vs Unifor Distribution")
plot(ecdf(runif(100000, 0, L)), main = "ECDF of Palindromes vs Unifor Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
plot(ecdf(runif(100000, 0, L)), main = "ECDF of Palindrome Locations vs Uniform Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
plot(ecdf(runif(100000, 0, L)),
main = "ECDF of Palindrome Locations vs Uniform Distribution",
xlab = "Location",
ylab = "Cumulative Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
plot(ecdf(runif(100000, 0, L)),
main = "ECDF of Palindrome Locations vs Uniform Distribution",
xlab = "Location",
ylab = "Cumulative Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
plot(ecdf(rpois(100000,lambda = mean(intv$n_palindrome))),
main = "ECDF of Number of Palindromes vs Poisson Distribution",
xlab = "Number of Palindromes",
ylab = "Cumulative Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
plot(ecdf(rpois(100000,lambda = mean(intv$n_palindrome))),
main = "ECDF of Number of Palindromes vs Poisson Distribution",
xlab = "Number of Palindromes",
ylab = "Cumulative Distribution")
plot(ecdf(intv$n_palindrome), add = TRUE, col = 'red', do.points = FALSE)
ks.test(intv$n_palindrome, ppois, lambda = mean(intv$n_palindrome))
# figuring out binwidth
plot_bins <- function(dat, palindrome_location, binwidth) {
return(ggplot(data = dat, aes(x = palindrome_location)) +
geom_histogram(aes(y = ..density..),
binwidth = binwidth, fill = "steelblue", color = "white") +
ggtitle(paste("n = ", binwidth)) +
ylim(c(0, 0.000020)) +
theme_minimal() +
geom_abline(slope = 0, intercept = (n/(L/binwidth))/n, color = "black")
)
}
bin1 <- plot_bins(data, data$location, 2000)
bin2 <- plot_bins(data, data$location, 3000)
bin3 <- plot_bins(data, data$location, 4000)
bin4 <- plot_bins(data, data$location, 5000)
bin5 <- plot_bins(data, data$location, 6000)
bin6 <- plot_bins(data, data$location, 7000)
(bin1 + bin2)/(bin3 + bin4) / (bin5  + bin6) +
plot_annotation(title = "Distribution of Locations Across Interval Length")
bin1 = plot_bins(random_df, random_df$sample, 2000)
bin2 = plot_bins(random_df, random_df$sample, 3000)
bin3 = plot_bins(random_df, random_df$sample, 4000)
bin4 = plot_bins(random_df, random_df$sample, 5000)
bin5 = plot_bins(random_df, random_df$sample, 6000)
bin6 = plot_bins(random_df, random_df$sample, 7000)
(bin1 + bin2)/(bin3 + bin4) / (bin5 + bin6) +
plot_annotation(title = "Distribution of Random Hits Across Interval Lengths")
(bin1 + bin2)/(bin3 + bin4) / (bin5  + bin6) +
plot_annotation(title = "Distribution of Locations Across Interval Length")
bin1 <- plot_bins(data, data$location, 2000)
bin2 <- plot_bins(data, data$location, 3000)
bin3 <- plot_bins(data, data$location, 4000)
bin4 <- plot_bins(data, data$location, 5000)
bin5 <- plot_bins(data, data$location, 6000)
bin6 <- plot_bins(data, data$location, 7000)
(bin1 + bin2)/(bin3 + bin4) / (bin5 + bin6) +
plot_annotation(title = "Distribution of Random Hits Across Interval Lengths")
(bin1 + bin2)/(bin3 + bin4) / (bin5  + bin6) +
plot_annotation(title = "Distribution of Locations Across Interval Length")
plot(ecdf(runif(100000, 0, L)),
main = "ECDF of Palindrome Locations vs Uniform Distribution",
xlab = "Location",
ylab = "Cumulative Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
plot(ecdf(runif(100000, 0, L)),
main = "ECDF of Palindrome Locations vs Uniform Distribution",
xlab = "Location",
ylab = "Cumulative Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
ks.test(sample, data$location)
ks.test(sample, data$location)
ks.test(data$location, punif)
ks.test(data$location, pnorm)
ks.test(data$location, ppois)
ks.test(data$location, pbinom)
ks.test(data$location, pbinom, size = 100)
ks.test(data$location, pnorm)
N = 1000
n = 300
ind.sample2 <- sample.int(n=N, size=n)
data.sample2 <- data.population[ind.sample2]
n = 296 # sample size
L = 229345 # total size
M = 3000 # interval length
n_int = L / M
ks.test(data$location, punif)
ks.test(data$location, pnorm)
ks.test(data$location, runif(1000))
ks.test(data$location, runif(100))
ks.test(data$location, pnorm)
hist(data$location)
ks.test(data$location, pexp)
ks.test(data$location, pexp)
ks.test(data$location, punif)
o
plot(ecdf(rpois(100000,lambda = mean(intv$n_palindrome))),
main = "ECDF of Number of Palindromes vs Poisson Distribution",
xlab = "Number of Palindromes",
ylab = "Cumulative Distribution")
plot(ecdf(intv$n_palindrome), add = TRUE, col = 'red', do.points = FALSE)
plot(ecdf(rpois(100000,lambda = mean(intv$n_palindrome))),
main = "ECDF of Number of Palindromes vs Poisson Distribution",
xlab = "Number of Palindromes",
ylab = "Cumulative Distribution")
plot(ecdf(intv$n_palindrome), add = TRUE, col = 'red', do.points = FALSE)
ks.test(intv$n_palindrome, ppois, lambda = mean(intv$n_palindrome))
plot(ecdf(sample), verticals = TRUE, col = 'blue', do.points = FALSE,
main = "ECDF of Random Hits and Palindrome Locations",
xlab = "Location",
ylab = "Cumulative Distribution")
plot(ecdf(data$location), add = TRUE, col = 'red', do.points = FALSE)
summary(sample)
summary(data$location)
ks.test(sample, data$location)
