err = runif( n = nrow(gauge), min = -0.01, max = 0.01)
gauge$density_adj = gauge$density + err
# fit model
mod_adj <- lm(gain ~ density_adj + I(density_adj^2) + I(density_adj^3), data = gauge)
plot(x = gauge$density_adj, y = gauge$gain , main = "Density vs Gain")
lines(predict(mod_adj) ~ density_adj, data=gauge, col='blue', lwd=2)
summary(mod_adj)$r.squared # 0.9965703
# introduce error into density data
err = runif( n = nrow(gauge), min = -0.05, max = 0.05)
gauge$density_adj = gauge$density + err
# fit model
mod_adj <- lm(gain ~ density_adj + I(density_adj^2) + I(density_adj^3), data = gauge)
plot(x = gauge$density_adj, y = gauge$gain , main = "Density vs Gain")
lines(predict(mod_adj) ~ density_adj, data=gauge, col='blue', lwd=2)
summary(mod_adj)$r.squared # 0.9965703
#residual plot - check linearity
plot(residuals(mod_adj) ~ density_adj, data = gauge,
main = "Residual Plot (Quadratic w/ Error)", xlab = "density", ylab = "residuals")
# normality of residuals - check equal variance(homoscedacidity) & nearly normal residuals
hist(residuals(mod_adj), main ="Normality of Residuals", xlab = "Residuals")
qqnorm(residuals(mod_adj),
main = "Normality of Residual Plot",
xlab = "Normal Distribution", ylab = "Residual Distribution")
qqline(residuals(mod_adj))
to_predict <- data.frame(
density= c( 0.508, 0.001),
avg_gain = c(38.6, 426.7)
)
# predict
for_pred = predict(mod2, newdata = to_predict, interval = "predict") #prediction interval
for_pred = round(for_pred, 2)
# put into dataframe to better compare
to_predict$pred_gain <- for_pred[,1]
to_predict$lower <- for_pred[,2]
to_predict$upper <- for_pred[,3]
to_predict
to_predict <- data.frame(
density= c( 0.508, 0.001),
avg_gain = c(38.6, 426.7)
)
# predict
for_pred = predict(mod2, newdata = to_predict, interval = "predict") #prediction interval
for_pred = round(for_pred, 2)
# put into dataframe to better compare
to_predict$pred_gain <- for_pred[,1]
to_predict$lower <- for_pred[,2]
to_predict$upper <- for_pred[,3]
to_predict
gauge[gauge$density == 0.508,]
gauge[gauge$density == 0.508, "gain"]
summary(gauge[gauge$density == 0.508, "gain"])
summary(gauge[gauge$density == 0.001, "gain"])
# introduce error into density data
err = runif( n = nrow(gauge), min = -0.01, max = 0.01)
gauge$density_adj = gauge$density + err
# fit model
mod_adj <- lm(gain ~ density_adj + I(density_adj^2) + I(density_adj^3), data = gauge)
plot(x = gauge$density_adj, y = gauge$gain , main = "Density vs Gain")
lines(predict(mod_adj) ~ density_adj, data=gauge, col='blue', lwd=2)
summary(mod_adj)$r.squared # 0.9965703
#residual plot - check linearity
plot(residuals(mod_adj) ~ density_adj, data = gauge,
main = "Residual Plot (Quadratic w/ Error)", xlab = "density", ylab = "residuals")
# normality of residuals - check equal variance(homoscedacidity) & nearly normal residuals
hist(residuals(mod_adj), main ="Normality of Residuals", xlab = "Residuals")
qqnorm(residuals(mod_adj),
main = "Normality of Residual Plot",
xlab = "Normal Distribution", ylab = "Residual Distribution")
qqline(residuals(mod_adj))
# model selection
k = 10
n = 90
d_max <- 6
cv.mse <- rep(NA, d_max)
for (d in 1:d_max){
cv.mse[d] <- cv_error(10, 90, d)
}
cv.mse
d_max <- 9
cv.mse <- rep(NA, d_max)
for (d in 1:d_max){
cv.mse[d] <- cv_error(10, 90, d)
}
# model selection
k = 10
n = 90
d_max <- 9
cv.mse <- rep(NA, d_max)
for (d in 1:d_max){
cv.mse[d] <- cv_error(10, 90, d)
}
d_max <- 8
cv.mse <- rep(NA, d_max)
for (d in 1:d_max){
cv.mse[d] <- cv_error(10, 90, d)
}
cv.mse# declutter
mod2 <- lm(gain ~ poly(density, degree = 5, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge)
lines(predict(mod2)~density, data = gauge, col = "blue")
mod4 <- lm(gain ~ poly(density, degree = 5, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod2)~density, data = gauge, col = "blue")
lines(predict(mod4)~density, data = gauge, col = "blue")
mod4 <- lm(gain ~ poly(density, degree = 6, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
mod4 <- lm(gain ~ poly(density, degree = 7, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
mod4 <- lm(gain ~ poly(density, degree = 8, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
mod4 <- lm(gain ~ poly(density, degree = 9, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
mod4 <- lm(gain ~ poly(density, degree = 10, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
mod4 <- lm(gain ~ poly(density, degree = 20, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
test <- runif(10, 0, 0.7)
test <- data.frame(runif(10, 0, 0.7))
predict(mod4, newdata = test)
test
test <- data.frame(density = runif(10, 0, 0.7))
predict(mod4, newdata = test)
mod4 <- lm(gain ~ poly(density, degree = 10, raw = TRUE), data = gauge)
test <- data.frame(density = runif(10, 0, 0.7))
predict(mod4, newdata = test)
test
sort(test)
test <- data.frame(density = sort(runif(10, 0, 0.7)))
predict(mod4, newdata = test)
test$pred <- predict(mod4, newdata = test)
View(test)
lines(predict(mod4)~density, data = test, col = "blue")
test <- data.frame(density = sort(runif(90, 0, 0.7)))
test$pred <- predict(mod4, newdata = test)
lines(predict(mod4)~density, data = test, col = "blue")
mod4 <- lm(gain ~ poly(density, degree = 4, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
test <- data.frame(density = sort(runif(90, 0, 0.7)))
test$pred <- predict(mod4, newdata = test)
lines(predict(mod4)~density, data = test, col = "blue")
mod4 <- lm(gain ~ poly(density, degree = 1, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
test <- data.frame(density = sort(runif(90, 0, 0.7)))
test$pred <- predict(mod4, newdata = test)
lines(predict(mod4)~density, data = test, col = "blue")
lines(predict(mod4) ~ density, data = test, col = "blue")
lines(predict(mod4) ~ density, data = test, col = "red")
mod4
summary(mod4)
plot( x = test$density, y = test$pred)
lines(predict(mod4) ~ density, data = test, col = "red")
lines(predict(mod4)~density, data = gauge, col = "blue")
lines(predict(mod4)~density, data = test, col = "red")
lines(predict(mod4), data = test, col = "red")
lines(predict(mod4)~pred, data = test, col = "red")
lines(predict(mod4)~density, data = test, col = "red")
plot( x = test$density, y = test$pred)
lines(predict(mod4)~density, data = test, col = "red")
mod4 <- lm(gain ~ poly(density, degree = 2, raw = TRUE), data = gauge)
plot( x = test$density, y = test$pred)
test <- data.frame(density = sort(runif(90, 0, 0.7)))
test$pred <- predict(mod4, newdata = test)
plot( x = test$density, y = test$pred)
lines(predict(mod4)~density, data = test, col = "red")
test <- data.frame(density = runif(90, 0, 0.7))
test$pred <- predict(mod4, newdata = test)
plot( x = test$density, y = test$pred)
lines(predict(mod4)~density, data = test, col = "red")
test <- data.frame(density = sort(runif(90, 0, 0.7), decreasing = T))
test$pred <- predict(mod4, newdata = test)
plot( x = test$density, y = test$pred)
lines(predict(mod4)~density, data = test, col = "red")
mod4 <- lm(gain ~ poly(density, degree = 3, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
test <- data.frame(density = sort(runif(90, 0, 0.7), decreasing = T))
test$pred <- predict(mod4, newdata = test)
plot( x = test$density, y = test$pred)
lines(predict(mod4)~density, data = test, col = "red")
k <- 10
n <- 90
d <- 3
# create a vector that assigns each observation to a group
folds = sample(rep(x = 1:k, length.out = n))
cv.mse <- rep(NA, k)
grp <- 1
test_idx <- which(folds == grp)
train <- gauge[-test_idx,]
mod <- lm(gain ~ poly(density, d, raw = TRUE), data = train)
test = gauge[test_idx,]
y = gauge$gain[test_idx]
yhat = predict(mod, newdata = test)
mean((y - yhat)^2)
grp <- 2
test_idx <- which(folds == grp)
train <- gauge[-test_idx,]
mod <- lm(gain ~ poly(density, d, raw = TRUE), data = train)
test = gauge[test_idx,]
y = gauge$gain[test_idx]
yhat = predict(mod, newdata = test)
mean((y - yhat)^2)
grp <- 5
test_idx <- which(folds == grp)
train <- gauge[-test_idx,]
mod <- lm(gain ~ poly(density, d, raw = TRUE), data = train)
test = gauge[test_idx,]
y = gauge$gain[test_idx]
yhat = predict(mod, newdata = test)
mean((y - yhat)^2)
for (grp in 1:k){
# indexes for the test set
test_idx <- which(folds == grp)
# training set
train <- gauge[-test_idx,]
#create model
mod <- lm(gain ~ poly(density, d, raw = TRUE), data = train)
# predict onto test set
test = gauge[test_idx,]
y = gauge$gain[test_idx]
yhat = predict(mod, newdata = test)
# assign to mse vector
cv.mse[grp] <- mean((y - yhat)^2)
}
mod4 <- lm(gain ~ poly(density, degree = 1, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
test <- data.frame(density = sort(runif(90, 0, 0.7), decreasing = T))
test$pred <- predict(mod4, newdata = test)
plot( x = test$density, y = test$pred)
lines(predict(mod4)~density, data = test, col = "red")
plot( x = test$density, y = test$pred)
lines( x = test$density, y = test$pred)
lines( x = test$density, y = test$pred, col = 'red')
mod4 <- lm(gain ~ poly(density, degree = 1, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
test <- data.frame(density = sort(runif(90, 0, 0.7), decreasing = T))
test$pred <- predict(mod4, newdata = test)
lines( x = test$density, y = test$pred, col = 'red')
mod4 <- lm(gain ~ poly(density, degree = 2, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
test <- data.frame(density = sort(runif(90, 0, 0.7), decreasing = T))
test$pred <- predict(mod4, newdata = test)
lines( x = test$density, y = test$pred, col = 'red')
mod4 <- lm(gain ~ poly(density, degree = 3, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
test <- data.frame(density = sort(runif(90, 0, 0.7), decreasing = T))
test$pred <- predict(mod4, newdata = test)
lines( x = test$density, y = test$pred, col = 'red')
mod4 <- lm(gain ~ poly(density, degree = 4, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
test <- data.frame(density = sort(runif(90, 0, 0.7), decreasing = T))
test$pred <- predict(mod4, newdata = test)
lines( x = test$density, y = test$pred, col = 'red')
mod4 <- lm(gain ~ poly(density, degree = 7, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
test <- data.frame(density = sort(runif(90, 0, 0.7), decreasing = T))
test$pred <- predict(mod4, newdata = test)
lines( x = test$density, y = test$pred, col = 'red')
d <- 20
# create a vector that assigns each observation to a group
folds = sample(rep(x = 1:k, length.out = n))
cv.mse <- rep(NA, k)
for (grp in 1:k){
# indexes for the test set
test_idx <- which(folds == grp)
# training set
train <- gauge[-test_idx,]
#create model
mod <- lm(gain ~ poly(density, d, raw = TRUE), data = train)
# predict onto test set
test = gauge[test_idx,]
y = gauge$gain[test_idx]
yhat = predict(mod, newdata = test)
# assign to mse vector
cv.mse[grp] <- mean((y - yhat)^2)
}
mean(cv.mse)
d <- 30
# create a vector that assigns each observation to a group
folds = sample(rep(x = 1:k, length.out = n))
cv.mse <- rep(NA, k)
for (grp in 1:k){
# indexes for the test set
test_idx <- which(folds == grp)
# training set
train <- gauge[-test_idx,]
#create model
mod <- lm(gain ~ poly(density, d, raw = TRUE), data = train)
# predict onto test set
test = gauge[test_idx,]
y = gauge$gain[test_idx]
yhat = predict(mod, newdata = test)
# assign to mse vector
cv.mse[grp] <- mean((y - yhat)^2)
}
mean(cv.mse)
d <- 25
# create a vector that assigns each observation to a group
folds = sample(rep(x = 1:k, length.out = n))
cv.mse <- rep(NA, k)
for (grp in 1:k){
# indexes for the test set
test_idx <- which(folds == grp)
# training set
train <- gauge[-test_idx,]
#create model
mod <- lm(gain ~ poly(density, d, raw = TRUE), data = train)
# predict onto test set
test = gauge[test_idx,]
y = gauge$gain[test_idx]
yhat = predict(mod, newdata = test)
# assign to mse vector
cv.mse[grp] <- mean((y - yhat)^2)
}
mean(cv.mse)
d <- 27
# create a vector that assigns each observation to a group
folds = sample(rep(x = 1:k, length.out = n))
cv.mse <- rep(NA, k)
for (grp in 1:k){
# indexes for the test set
test_idx <- which(folds == grp)
# training set
train <- gauge[-test_idx,]
#create model
mod <- lm(gain ~ poly(density, d, raw = TRUE), data = train)
# predict onto test set
test = gauge[test_idx,]
y = gauge$gain[test_idx]
yhat = predict(mod, newdata = test)
# assign to mse vector
cv.mse[grp] <- mean((y - yhat)^2)
}
mean(cv.mse)
d <- 26
# create a vector that assigns each observation to a group
folds = sample(rep(x = 1:k, length.out = n))
cv.mse <- rep(NA, k)
for (grp in 1:k){
# indexes for the test set
test_idx <- which(folds == grp)
# training set
train <- gauge[-test_idx,]
#create model
mod <- lm(gain ~ poly(density, d, raw = TRUE), data = train)
# predict onto test set
test = gauge[test_idx,]
y = gauge$gain[test_idx]
yhat = predict(mod, newdata = test)
# assign to mse vector
cv.mse[grp] <- mean((y - yhat)^2)
}
mean(cv.mse)
mod4 <- lm(gain ~ poly(density, degree = 7, raw = TRUE), data = gauge)
plot( x =gauge$density, y = gauge$gain)
lines(predict(mod4)~density, data = gauge, col = "blue")
test <- data.frame(density = sort(runif(90, 0, 0.7), decreasing = T))
test$pred <- predict(mod4, newdata = test)
lines( x = test$density, y = test$pred, col = 'red')
k <- 10
n <- 90
d <- 26
# create a vector that assigns each observation to a group
folds = sample(rep(x = 1:k, length.out = n))
cv.mse <- rep(NA, k)
for (grp in 1:k){
# indexes for the test set
test_idx <- which(folds == grp)
# training set
train <- gauge[-test_idx,]
#create model
mod <- lm(gain ~ poly(density, d, raw = TRUE), data = train)
# predict onto test set
test = gauge[test_idx,]
y = gauge$gain[test_idx]
yhat = predict(mod, newdata = test)
# assign to mse vector
cv.mse[grp] <- mean((y - yhat)^2)
}
mean(cv.mse)
# fit model
mod2 <- lm(gain ~ poly(density, degree = 7, raw = TRUE), data = gauge)
# plot
plot(x = gauge$density, y = gauge$gain, main = "Density vs Gain (Degree = 4)",
xlab = "density", ylab = "gain")
lines(predict(mod2) ~ density, data=gauge, col='blue', lwd=2)
# fit model
mod2 <- lm(gain ~ poly(density, degree = 7, raw = TRUE), data = gauge)
# plot
plot(x = gauge$density, y = gauge$gain, main = "Density vs Gain (Degree = 4)",
xlab = "density", ylab = "gain")
lines(predict(mod2) ~ density, data=gauge, col='blue', lwd=2)
summary(mod2)$r.squared #0.9988042
#residual plot - check linearity
plot(residuals(mod2) ~ density, data = gauge, main = "Residual Plot (Degree = 4)",
xlab = "density", ylab = "Residuals")
abline(0,0)
# normality of residuals - check equal variance(homoscedacidity) & nearly normal residuals
hist(residuals(mod2), main ="Normality of Residuals", xlab = "Residuals")
qqnorm(residuals(mod2),
main = "Normality of Residual Plot",
xlab = "Normal Distribution", ylab = "Residual Distribution")
qqline(residuals(mod2))
# introduce error into density data
err = runif( n = nrow(gauge), min = -0.01, max = 0.01)
gauge$density_adj = gauge$density + err
# fit model
mod_adj <- lm(gain ~ density_adj + I(density_adj^2) + I(density_adj^3), data = gauge)
plot(x = gauge$density_adj, y = gauge$gain , main = "Density vs Gain")
lines(predict(mod_adj) ~ density_adj, data=gauge, col='blue', lwd=2)
summary(mod_adj)$r.squared # 0.9965703
# fit model
mod2 <- lm(gain ~ poly(density, degree = 3, raw = TRUE), data = gauge)
# plot
plot(x = gauge$density, y = gauge$gain, main = "Density vs Gain (Degree = 4)",
xlab = "density", ylab = "gain")
lines(predict(mod2) ~ density, data=gauge, col='blue', lwd=2)
summary(mod2)$r.squared #0.9988042
#residual plot - check linearity
plot(residuals(mod2) ~ density, data = gauge, main = "Residual Plot (Degree = 4)",
xlab = "density", ylab = "Residuals")
abline(0,0)
# normality of residuals - check equal variance(homoscedacidity) & nearly normal residuals
hist(residuals(mod2), main ="Normality of Residuals", xlab = "Residuals")
qqnorm(residuals(mod2),
main = "Normality of Residual Plot",
xlab = "Normal Distribution", ylab = "Residual Distribution")
qqline(residuals(mod2))
# fit model
mod2 <- lm(gain ~ poly(density, degree = 4, raw = TRUE), data = gauge)
# plot
plot(x = gauge$density, y = gauge$gain, main = "Density vs Gain (Degree = 4)",
xlab = "density", ylab = "gain")
lines(predict(mod2) ~ density, data=gauge, col='blue', lwd=2)
summary(mod2)$r.squared #0.9988042
#residual plot - check linearity
plot(residuals(mod2) ~ density, data = gauge, main = "Residual Plot (Degree = 4)",
xlab = "density", ylab = "Residuals")
abline(0,0)
# normality of residuals - check equal variance(homoscedacidity) & nearly normal residuals
hist(residuals(mod2), main ="Normality of Residuals", xlab = "Residuals")
qqnorm(residuals(mod2),
main = "Normality of Residual Plot",
xlab = "Normal Distribution", ylab = "Residual Distribution")
qqline(residuals(mod2))
# fit model
mod2 <- lm(gain ~ poly(density, degree = 5, raw = TRUE), data = gauge)
# plot
plot(x = gauge$density, y = gauge$gain, main = "Density vs Gain (Degree = 4)",
xlab = "density", ylab = "gain")
lines(predict(mod2) ~ density, data=gauge, col='blue', lwd=2)
summary(mod2)$r.squared #0.9988042
#residual plot - check linearity
plot(residuals(mod2) ~ density, data = gauge, main = "Residual Plot (Degree = 4)",
xlab = "density", ylab = "Residuals")
abline(0,0)
# normality of residuals - check equal variance(homoscedacidity) & nearly normal residuals
hist(residuals(mod2), main ="Normality of Residuals", xlab = "Residuals")
qqnorm(residuals(mod2),
main = "Normality of Residual Plot",
xlab = "Normal Distribution", ylab = "Residual Distribution")
qqline(residuals(mod2))
# cross validation to determine polynomial degree with lowest mse
# cv function - finds mse
# @param: k (number of groups)
# @n: sample size
# @d: polynomial degree
# @returns: cv mse of polynomial degree
cv_error <- function(k, n, d){
# create a vector that assigns each observation to a group
folds = sample(rep(x = 1:k, length.out = n))
cv.mse <- rep(NA, k)
for (grp in 1:k){
# indexes for the test set
test_idx <- which(folds == grp)
# training set
train <- gauge[-test_idx,]
#create model
mod <- lm(gain ~ poly(density, d, raw = TRUE), data = train)
# predict onto test set
test = gauge[test_idx,]
y = gauge$gain[test_idx]
yhat = predict(mod, newdata = test)
# assign to mse vector
cv.mse[grp] <- mean((y - yhat)^2)
}
return(mean(cv.mse))
}
# model selection
k = 10
n = 90
d_max <- 8
cv.mse <- rep(NA, d_max)
for (d in 1:d_max){
cv.mse[d] <- cv_error(10, 90, d)
}
cv.mse# declutter
rm(k, n, d_max, d)
